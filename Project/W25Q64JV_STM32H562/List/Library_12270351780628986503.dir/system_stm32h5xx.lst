###############################################################################
#
# IAR ANSI C/C++ Compiler V9.40.1.364/W64 for ARM         23/Nov/2023  21:46:17
# Copyright 1999-2023 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Source\Library\system_stm32h5xx.c
#    Command line      =
#        -f
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\Obj\Library_12270351780628986503.dir\system_stm32h5xx.o.rsp
#        (C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Source\Library\system_stm32h5xx.c
#        -D STM32H562xx -lCN
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\List\Library_12270351780628986503.dir
#        -lA
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\List\Library_12270351780628986503.dir
#        -o
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\Obj\Library_12270351780628986503.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33.no_dsp.no_se -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\..\Includes\CMSIS\
#        -I
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\..\Includes\Library\
#        -I
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\..\Includes\Loader\
#        -Ol) --dependencies=n
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\Obj\Library_12270351780628986503.dir\system_stm32h5xx.o.iar_deps
#    Locale            =  C
#    List file         =
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\List\Library_12270351780628986503.dir\system_stm32h5xx.lst
#    Object file       =
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\Obj\Library_12270351780628986503.dir\system_stm32h5xx.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Source\Library\system_stm32h5xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32h5xx.c
      4            * @author  MCD Application Team
      5            * @brief   CMSIS Cortex-M33 Device Peripheral Access Layer System Source File
      6            *
      7            ******************************************************************************
      8            * @attention
      9            *
     10            * Copyright (c) 2023 STMicroelectronics.
     11            * All rights reserved.
     12            *
     13            * This software is licensed under terms that can be found in the LICENSE file
     14            * in the root directory of this software component.
     15            * If no LICENSE file comes with this software, it is provided AS-IS.
     16            *
     17            ******************************************************************************
     18            *   This file provides two functions and one global variable to be called from
     19            *   user application:
     20            *      - SystemInit(): This function is called at startup just after reset and
     21            *                      before branch to main program. This call is made inside
     22            *                      the "startup_stm32h5xx.s" file.
     23            *
     24            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     25            *                                  by the user application to setup the SysTick
     26            *                                  timer or configure other parameters.
     27            *
     28            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     29            *                                 be called whenever the core clock is changed
     30            *                                 during program execution.
     31            *
     32            *   After each device reset the HSI (64 MHz) is used as system clock source.
     33            *   Then SystemInit() function is called, in "startup_stm32h5xx.s" file, to
     34            *   configure the system clock before to branch to main program.
     35            *
     36            *   This file configures the system clock as follows:
     37            *=============================================================================
     38            *-----------------------------------------------------------------------------
     39            *        System Clock source                     | HSI
     40            *-----------------------------------------------------------------------------
     41            *        SYSCLK(Hz)                              | 64000000
     42            *-----------------------------------------------------------------------------
     43            *        HCLK(Hz)                                | 64000000
     44            *-----------------------------------------------------------------------------
     45            *        AHB Prescaler                           | 1
     46            *-----------------------------------------------------------------------------
     47            *        APB1 Prescaler                          | 1
     48            *-----------------------------------------------------------------------------
     49            *        APB2 Prescaler                          | 1
     50            *-----------------------------------------------------------------------------
     51            *        APB3 Prescaler                          | 1
     52            *-----------------------------------------------------------------------------
     53            *        HSI Division factor                     | 1
     54            *-----------------------------------------------------------------------------
     55            *        PLL1_SRC                                | No clock
     56            *-----------------------------------------------------------------------------
     57            *        PLL1_M                                  | Prescaler disabled
     58            *-----------------------------------------------------------------------------
     59            *        PLL1_N                                  | 129
     60            *-----------------------------------------------------------------------------
     61            *        PLL1_P                                  | 2
     62            *-----------------------------------------------------------------------------
     63            *        PLL1_Q                                  | 2
     64            *-----------------------------------------------------------------------------
     65            *        PLL1_R                                  | 2
     66            *-----------------------------------------------------------------------------
     67            *        PLL1_FRACN                              | 0
     68            *-----------------------------------------------------------------------------
     69            *        PLL2_SRC                                | No clock
     70            *-----------------------------------------------------------------------------
     71            *        PLL2_M                                  | Prescaler disabled
     72            *-----------------------------------------------------------------------------
     73            *        PLL2_N                                  | 129
     74            *-----------------------------------------------------------------------------
     75            *        PLL2_P                                  | 2
     76            *-----------------------------------------------------------------------------
     77            *        PLL2_Q                                  | 2
     78            *-----------------------------------------------------------------------------
     79            *        PLL2_R                                  | 2
     80            *-----------------------------------------------------------------------------
     81            *        PLL2_FRACN                              | 0
     82            *-----------------------------------------------------------------------------
     83            *        PLL3_SRC                                | No clock
     84            *-----------------------------------------------------------------------------
     85            *        PLL3_M                                  | Prescaler disabled
     86            *-----------------------------------------------------------------------------
     87            *        PLL3_N                                  | 129
     88            *-----------------------------------------------------------------------------
     89            *        PLL3_P                                  | 2
     90            *-----------------------------------------------------------------------------
     91            *        PLL3_Q                                  | 2
     92            *-----------------------------------------------------------------------------
     93            *        PLL3_R                                  | 2
     94            *-----------------------------------------------------------------------------
     95            *        PLL3_FRACN                              | 0
     96            *-----------------------------------------------------------------------------
     97            *=============================================================================
     98            */
     99          
    100          /** @addtogroup CMSIS
    101            * @{
    102            */
    103          
    104          /** @addtogroup STM32H5xx_system
    105            * @{
    106            */
    107          
    108          /** @addtogroup STM32H5xx_System_Private_Includes
    109            * @{
    110            */
    111          
    112          #include "stm32h5xx.h"
    113          
    114          /**
    115            * @}
    116            */
    117          
    118          /** @addtogroup STM32H5xx_System_Private_TypesDefinitions
    119            * @{
    120            */
    121          
    122          /**
    123            * @}
    124            */
    125          
    126          /** @addtogroup STM32H5xx_System_Private_Defines
    127            * @{
    128            */
    129          
    130          #if !defined  (HSE_VALUE)
    131            #define HSE_VALUE    (25000000UL) /*!< Value of the External oscillator in Hz */
    132          #endif /* HSE_VALUE */
    133          
    134          #if !defined  (CSI_VALUE)
    135            #define CSI_VALUE    (4000000UL)  /*!< Value of the Internal oscillator in Hz*/
    136          #endif /* CSI_VALUE */
    137          
    138          #if !defined  (HSI_VALUE)
    139            #define HSI_VALUE    (64000000UL) /*!< Value of the Internal oscillator in Hz */
    140          #endif /* HSI_VALUE */
    141          
    142          /************************* Miscellaneous Configuration ************************/
    143          /*!< Uncomment the following line if you need to relocate your vector Table in
    144               Internal SRAM. */
    145          /* #define VECT_TAB_SRAM */
    146          #define VECT_TAB_OFFSET  0x00U /*!< Vector Table base offset field.
    147                                             This value must be a multiple of 0x200. */
    148          /******************************************************************************/
    149          
    150          /**
    151            * @}
    152            */
    153          
    154          /** @addtogroup STM32H5xx_System_Private_Macros
    155            * @{
    156            */
    157          
    158          /**
    159            * @}
    160            */
    161          
    162          /** @addtogroup STM32H5xx_System_Private_Variables
    163            * @{
    164            */
    165            /* The SystemCoreClock variable is updated in three ways:
    166                1) by calling CMSIS function SystemCoreClockUpdate()
    167                2) by calling HAL API function HAL_RCC_GetHCLKFreq()
    168                3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
    169                   Note: If you use this function to configure the system clock; then there
    170                         is no need to call the 2 first functions listed above, since SystemCoreClock
    171                         variable is updated automatically.
    172            */

   \                                 In section .data, align 4
    173            uint32_t SystemCoreClock = 64000000U;
   \                     SystemCoreClock:
   \        0x0   0x03D0'9000        DC32 64'000'000
    174          

   \                                 In section .rodata, align 4
    175            const uint8_t  AHBPrescTable[16] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
   \                     AHBPrescTable:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x03 0x04    
   \              0x06 0x07    
   \              0x08 0x09

   \                                 In section .rodata, align 4
    176            const uint8_t  APBPrescTable[8] =  {0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U};
   \                     APBPrescTable:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 1, 2, 3, 4
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x03 0x04
    177          /**
    178            * @}
    179            */
    180          
    181          /** @addtogroup STM32H5xx_System_Private_FunctionPrototypes
    182            * @{
    183            */
    184          
    185          /**
    186            * @}
    187            */
    188          
    189          /** @addtogroup STM32H5xx_System_Private_Functions
    190            * @{
    191            */
    192          
    193          /**
    194            * @brief  Setup the microcontroller system.
    195            * @param  None
    196            * @retval None
    197            */
    198          

   \                                 In section .text, align 2, keep-with-next
    199          void SystemInit(void)
    200          {
    201            uint32_t reg_opsr;
    202          
    203            /* FPU settings ------------------------------------------------------------*/
    204            #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    205             SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
   \                     SystemInit: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable1_4
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0xF451 0x0170      ORRS     R1,R1,#0xF00000
   \        0x8   0x6001             STR      R1,[R0, #+0]
    206            #endif
    207          
    208            /* Reset the RCC clock configuration to the default reset state ------------*/
    209            /* Set HSION bit */
    210            RCC->CR = RCC_CR_HSION;
   \        0xA   0x....             LDR.N    R1,??DataTable1_5
   \        0xC   0x2001             MOVS     R0,#+1
   \        0xE   0x6008             STR      R0,[R1, #+0]
    211          
    212            /* Reset CFGR register */
    213            RCC->CFGR1 = 0U;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x....             LDR.N    R2,??DataTable1_6
   \       0x14   0x6010             STR      R0,[R2, #+0]
    214            RCC->CFGR2 = 0U;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0x....             LDR.N    R2,??DataTable1_7
   \       0x1A   0x6010             STR      R0,[R2, #+0]
    215          
    216            /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
    217          #if defined(RCC_CR_PLL3ON)
    218            RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
    219                         RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
   \       0x1C   0x680A             LDR      R2,[R1, #+0]
   \       0x1E   0x....             LDR.N    R0,??DataTable1_8
   \       0x20   0x4002             ANDS     R2,R0,R2
   \       0x22   0x600A             STR      R2,[R1, #+0]
    220          #else
    221            RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
    222                         RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
    223          #endif
    224          
    225            /* Reset PLLxCFGR register */
    226            RCC->PLL1CFGR = 0U;
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0x....             LDR.N    R2,??DataTable1_9
   \       0x28   0x6010             STR      R0,[R2, #+0]
    227            RCC->PLL2CFGR = 0U;
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0x....             LDR.N    R2,??DataTable1_10
   \       0x2E   0x6010             STR      R0,[R2, #+0]
    228          #if defined(RCC_CR_PLL3ON)
    229            RCC->PLL3CFGR = 0U;
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0x....             LDR.N    R2,??DataTable1_11
   \       0x34   0x6010             STR      R0,[R2, #+0]
    230          #endif /* RCC_CR_PLL3ON */
    231          
    232            /* Reset PLL1DIVR register */
    233            RCC->PLL1DIVR = 0x01010280U;
   \       0x36   0x....             LDR.N    R0,??DataTable1_12
   \       0x38   0x....             LDR.N    R2,??DataTable1_13
   \       0x3A   0x6010             STR      R0,[R2, #+0]
    234            /* Reset PLL1FRACR register */
    235            RCC->PLL1FRACR = 0x00000000U;
   \       0x3C   0x2200             MOVS     R2,#+0
   \       0x3E   0x....             LDR.N    R3,??DataTable1_14
   \       0x40   0x601A             STR      R2,[R3, #+0]
    236            /* Reset PLL2DIVR register */
    237            RCC->PLL2DIVR = 0x01010280U;
   \       0x42   0x....             LDR.N    R2,??DataTable1_15
   \       0x44   0x6010             STR      R0,[R2, #+0]
    238            /* Reset PLL2FRACR register */
    239            RCC->PLL2FRACR = 0x00000000U;
   \       0x46   0x2200             MOVS     R2,#+0
   \       0x48   0x....             LDR.N    R3,??DataTable1_16
   \       0x4A   0x601A             STR      R2,[R3, #+0]
    240          #if defined(RCC_CR_PLL3ON)
    241            /* Reset PLL3DIVR register */
    242            RCC->PLL3DIVR = 0x01010280U;
   \       0x4C   0x....             LDR.N    R2,??DataTable1_17
   \       0x4E   0x6010             STR      R0,[R2, #+0]
    243            /* Reset PLL3FRACR register */
    244            RCC->PLL3FRACR = 0x00000000U;
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0x....             LDR.N    R2,??DataTable1_18
   \       0x54   0x6010             STR      R0,[R2, #+0]
    245          #endif /* RCC_CR_PLL3ON */
    246          
    247            /* Reset HSEBYP bit */
    248            RCC->CR &= ~(RCC_CR_HSEBYP);
   \       0x56   0x6808             LDR      R0,[R1, #+0]
   \       0x58   0xF430 0x2080      BICS     R0,R0,#0x40000
   \       0x5C   0x6008             STR      R0,[R1, #+0]
    249          
    250            /* Disable all interrupts */
    251            RCC->CIER = 0U;
   \       0x5E   0x2000             MOVS     R0,#+0
   \       0x60   0x....             LDR.N    R1,??DataTable1_19
   \       0x62   0x6008             STR      R0,[R1, #+0]
    252          
    253            /* Configure the Vector Table location add offset address ------------------*/
    254            #ifdef VECT_TAB_SRAM
    255              SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
    256            #else
    257              SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
   \       0x64   0xF05F 0x6000      MOVS     R0,#+134217728
   \       0x68   0x....             LDR.N    R1,??DataTable1_20
   \       0x6A   0x6008             STR      R0,[R1, #+0]
    258            #endif /* VECT_TAB_SRAM */
    259          
    260            /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
    261            reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
   \       0x6C   0x....             LDR.N    R0,??DataTable1_21
   \       0x6E   0x6800             LDR      R0,[R0, #+0]
   \       0x70   0xF010 0x4060      ANDS     R0,R0,#0xE0000000
    262            if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
   \       0x74   0xF1B0 0x4F60      CMP      R0,#+3758096384
   \       0x78   0xD002             BEQ.N    ??SystemInit_0
   \       0x7A   0xF1B0 0x4F40      CMP      R0,#+3221225472
   \       0x7E   0xD110             BNE.N    ??SystemInit_1
    263            {
    264              /* Check FLASH Option Control Register access */
    265              if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
   \                     ??SystemInit_0: (+1)
   \       0x80   0x....             LDR.N    R0,??DataTable1_22
   \       0x82   0x6801             LDR      R1,[R0, #+0]
   \       0x84   0x07C9             LSLS     R1,R1,#+31
   \       0x86   0xD504             BPL.N    ??SystemInit_2
    266              {
    267                /* Authorizes the Option Byte registers programming */
    268                FLASH->OPTKEYR = 0x08192A3BU;
   \       0x88   0x....             LDR.N    R1,??DataTable1_23
   \       0x8A   0x....             LDR.N    R2,??DataTable1_24
   \       0x8C   0x600A             STR      R2,[R1, #+0]
    269                FLASH->OPTKEYR = 0x4C5D6E7FU;
   \       0x8E   0x....             LDR.N    R2,??DataTable1_25
   \       0x90   0x600A             STR      R2,[R1, #+0]
    270              }
    271              /* Launch the option bytes change operation */
    272              FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
   \                     ??SystemInit_2: (+1)
   \       0x92   0x6801             LDR      R1,[R0, #+0]
   \       0x94   0xF051 0x0102      ORRS     R1,R1,#0x2
   \       0x98   0x6001             STR      R1,[R0, #+0]
    273          
    274              /* Lock the FLASH Option Control Register access */
    275              FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
   \       0x9A   0x6801             LDR      R1,[R0, #+0]
   \       0x9C   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0xA0   0x6001             STR      R1,[R0, #+0]
    276            }
    277          }
   \                     ??SystemInit_1: (+1)
   \       0xA2   0x4770             BX       LR
    278          
    279          /**
    280            * @brief  Update SystemCoreClock variable according to Clock Register Values.
    281            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    282            *         be used by the user application to setup the SysTick timer or configure
    283            *         other parameters.
    284            *
    285            * @note   Each time the core clock (HCLK) changes, this function must be called
    286            *         to update SystemCoreClock variable value. Otherwise, any configuration
    287            *         based on this variable will be incorrect.
    288            *
    289            * @note   - The system frequency computed by this function is not the real
    290            *           frequency in the chip. It is calculated based on the predefined
    291            *           constant and the selected clock source:
    292            *
    293            *           - If SYSCLK source is CSI, SystemCoreClock will contain the CSI_VALUE(*)
    294            *
    295            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(**)
    296            *
    297            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(***)
    298            *
    299            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(***)
    300            *             or HSI_VALUE(**) or CSI_VALUE(*) multiplied/divided by the PLL factors.
    301            *
    302            *         (*) CSI_VALUE is a constant defined in stm32h5xx_hal.h file (default value
    303            *             4 MHz) but the real value may vary depending on the variations
    304            *             in voltage and temperature.
    305            *
    306            *         (**) HSI_VALUE is a constant defined in stm32h5xx_hal.h file (default value
    307            *              64 MHz) but the real value may vary depending on the variations
    308            *              in voltage and temperature.
    309            *
    310            *         (***) HSE_VALUE is a constant defined in stm32h5xx_hal.h file (default value
    311            *              25 MHz), user has to ensure that HSE_VALUE is same as the real
    312            *              frequency of the crystal used. Otherwise, this function may
    313            *              have wrong result.
    314            *
    315            *         - The result of this function could be not correct when using fractional
    316            *           value for HSE crystal.
    317            *
    318            * @param  None
    319            * @retval None
    320            */

   \                                 In section .text, align 4, keep-with-next
    321          void SystemCoreClockUpdate(void)
    322          {
    323            uint32_t pllp, pllsource, pllm, pllfracen, hsivalue, tmp;
    324            float_t fracn1, pllvco;
    325          
    326            /* Get SYSCLK source -------------------------------------------------------*/
    327            switch (RCC->CFGR1 & RCC_CFGR1_SWS)
   \                     SystemCoreClockUpdate: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable1_6
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0xF010 0x0018      ANDS     R0,R0,#0x18
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD006             BEQ.N    ??SystemCoreClockUpdate_0
   \        0xC   0x2808             CMP      R0,#+8
   \        0xE   0xD00D             BEQ.N    ??SystemCoreClockUpdate_1
   \       0x10   0x2810             CMP      R0,#+16
   \       0x12   0xD00F             BEQ.N    ??SystemCoreClockUpdate_2
   \       0x14   0x2818             CMP      R0,#+24
   \       0x16   0xD011             BEQ.N    ??SystemCoreClockUpdate_3
   \       0x18   0xE098             B.N      ??SystemCoreClockUpdate_4
    328            {
    329            case 0x00UL:  /* HSI used as system clock source */
    330              SystemCoreClock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
   \                     ??SystemCoreClockUpdate_0: (+1)
   \       0x1A   0x....             LDR.N    R0,??DataTable1_26
   \       0x1C   0x....             LDR.N    R1,??DataTable1_5
   \       0x1E   0x6809             LDR      R1,[R1, #+0]
   \       0x20   0xF3C1 0x01C1      UBFX     R1,R1,#+3,#+2
   \       0x24   0x40C8             LSRS     R0,R0,R1
   \       0x26   0x....             LDR.N    R1,??DataTable1_27
   \       0x28   0x6008             STR      R0,[R1, #+0]
    331              break;
   \       0x2A   0xE092             B.N      ??SystemCoreClockUpdate_5
    332          
    333            case 0x08UL:  /* CSI used as system clock  source */
    334              SystemCoreClock = CSI_VALUE;
   \                     ??SystemCoreClockUpdate_1: (+1)
   \       0x2C   0x....             LDR.N    R0,??DataTable1_28
   \       0x2E   0x....             LDR.N    R1,??DataTable1_27
   \       0x30   0x6008             STR      R0,[R1, #+0]
    335              break;
   \       0x32   0xE08E             B.N      ??SystemCoreClockUpdate_5
    336          
    337            case 0x10UL:  /* HSE used as system clock  source */
    338              SystemCoreClock = HSE_VALUE;
   \                     ??SystemCoreClockUpdate_2: (+1)
   \       0x34   0x....             LDR.N    R0,??DataTable1_29
   \       0x36   0x....             LDR.N    R1,??DataTable1_27
   \       0x38   0x6008             STR      R0,[R1, #+0]
    339              break;
   \       0x3A   0xE08A             B.N      ??SystemCoreClockUpdate_5
    340          
    341            case 0x18UL:  /* PLL1 used as system clock source */
    342              /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    343              SYSCLK = PLL_VCO / PLLR
    344              */
    345              pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
   \                     ??SystemCoreClockUpdate_3: (+1)
   \       0x3C   0x....             LDR.N    R0,??DataTable1_9
   \       0x3E   0x6801             LDR      R1,[R0, #+0]
   \       0x40   0xF011 0x0103      ANDS     R1,R1,#0x3
    346              pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M)>> RCC_PLL1CFGR_PLL1M_Pos);
   \       0x44   0x6802             LDR      R2,[R0, #+0]
   \       0x46   0xF3C2 0x2205      UBFX     R2,R2,#+8,#+6
   \       0x4A   0xEE00 0x2A10      VMOV     S0,R2
    347              pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN)>>RCC_PLL1CFGR_PLL1FRACEN_Pos);
   \       0x4E   0x6800             LDR      R0,[R0, #+0]
   \       0x50   0xF3C0 0x1200      UBFX     R2,R0,#+4,#+1
    348              fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN)>> RCC_PLL1FRACR_PLL1FRACN_Pos));
   \       0x54   0x....             LDR.N    R0,??DataTable1_14
   \       0x56   0x6800             LDR      R0,[R0, #+0]
   \       0x58   0xF3C0 0x00CC      UBFX     R0,R0,#+3,#+13
   \       0x5C   0x4342             MULS     R2,R0,R2
   \       0x5E   0xEE00 0x2A90      VMOV     S1,R2
   \       0x62   0xEEB8 0x1A60      VCVT.F32.U32 S2,S1
    349          
    350              switch (pllsource)
   \       0x66   0x2901             CMP      R1,#+1
   \       0x68   0xD004             BEQ.N    ??SystemCoreClockUpdate_6
   \       0x6A   0xD35C             BCC.N    ??SystemCoreClockUpdate_7
   \       0x6C   0x2903             CMP      R1,#+3
   \       0x6E   0xD03F             BEQ.N    ??SystemCoreClockUpdate_8
   \       0x70   0xD323             BCC.N    ??SystemCoreClockUpdate_9
   \       0x72   0xE058             B.N      ??SystemCoreClockUpdate_7
    351              {
    352              case 0x01UL:  /* HSI used as PLL clock source */
    353                hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
   \                     ??SystemCoreClockUpdate_6: (+1)
   \       0x74   0x....             LDR.N    R0,??DataTable1_26
   \       0x76   0x....             LDR.N    R1,??DataTable1_5
   \       0x78   0x6809             LDR      R1,[R1, #+0]
   \       0x7A   0xF3C1 0x01C1      UBFX     R1,R1,#+3,#+2
   \       0x7E   0x40C8             LSRS     R0,R0,R1
   \       0x80   0xEE00 0x0A90      VMOV     S1,R0
    354                pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
    355                          (fracn1/(float_t)0x2000) +(float_t)1 );
   \       0x84   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \       0x88   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \       0x8C   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \       0x90   0x....             LDR.N    R0,??DataTable1_13
   \       0x92   0x6800             LDR      R0,[R0, #+0]
   \       0x94   0x05C0             LSLS     R0,R0,#+23
   \       0x96   0x0DC0             LSRS     R0,R0,#+23
   \       0x98   0xEE00 0x0A90      VMOV     S1,R0
   \       0x9C   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \       0xA0   0xEDDF 0x....      VLDR.W   S3,??DataTable1
   \       0xA4   0xEE81 0x1A21      VDIV.F32 S2,S2,S3
   \       0xA8   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \       0xAC   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \       0xB0   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \       0xB4   0xEE60 0x0A20      VMUL.F32 S1,S0,S1
    356                break;
   \       0xB8   0xE037             B.N      ??SystemCoreClockUpdate_10
    357          
    358              case 0x02UL:  /* CSI used as PLL clock source */
    359                pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
    360                          (fracn1/(float_t)0x2000) +(float_t)1 );
   \                     ??SystemCoreClockUpdate_9: (+1)
   \       0xBA   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \       0xBE   0xEDDF 0x....      VLDR.W   S1,??DataTable1_1
   \       0xC2   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \       0xC6   0x....             LDR.N    R0,??DataTable1_13
   \       0xC8   0x6800             LDR      R0,[R0, #+0]
   \       0xCA   0x05C0             LSLS     R0,R0,#+23
   \       0xCC   0x0DC0             LSRS     R0,R0,#+23
   \       0xCE   0xEE00 0x0A90      VMOV     S1,R0
   \       0xD2   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \       0xD6   0xEDDF 0x....      VLDR.W   S3,??DataTable1
   \       0xDA   0xEE81 0x1A21      VDIV.F32 S2,S2,S3
   \       0xDE   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \       0xE2   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \       0xE6   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \       0xEA   0xEE60 0x0A20      VMUL.F32 S1,S0,S1
    361                break;
   \       0xEE   0xE01C             B.N      ??SystemCoreClockUpdate_10
    362          
    363              case 0x03UL:  /* HSE used as PLL clock source */
    364                pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
    365                          (fracn1/(float_t)0x2000) +(float_t)1 );
   \                     ??SystemCoreClockUpdate_8: (+1)
   \       0xF0   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \       0xF4   0xEDDF 0x....      VLDR.W   S1,??DataTable1_2
   \       0xF8   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \       0xFC   0x....             LDR.N    R0,??DataTable1_13
   \       0xFE   0x6800             LDR      R0,[R0, #+0]
   \      0x100   0x05C0             LSLS     R0,R0,#+23
   \      0x102   0x0DC0             LSRS     R0,R0,#+23
   \      0x104   0xEE00 0x0A90      VMOV     S1,R0
   \      0x108   0xEEF8 0x0A60      VCVT.F32.U32 S1,S1
   \      0x10C   0xEDDF 0x....      VLDR.W   S3,??DataTable1
   \      0x110   0xEE81 0x1A21      VDIV.F32 S2,S2,S3
   \      0x114   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \      0x118   0xEEB7 0x1A00      VMOV.F32 S2,#1.0
   \      0x11C   0xEE70 0x0A81      VADD.F32 S1,S1,S2
   \      0x120   0xEE60 0x0A20      VMUL.F32 S1,S0,S1
    366                break;
   \      0x124   0xE001             B.N      ??SystemCoreClockUpdate_10
    367          
    368              default:  /* No clock sent to PLL*/
    369                pllvco = (float_t) 0U;
   \                     ??SystemCoreClockUpdate_7: (+1)
   \      0x126   0xEDDF 0x....      VLDR.W   S1,??DataTable1_3
    370                break;
    371              }
    372          
    373              pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >>RCC_PLL1DIVR_PLL1P_Pos) + 1U ) ;
   \                     ??SystemCoreClockUpdate_10: (+1)
   \      0x12A   0x....             LDR.N    R0,??DataTable1_13
   \      0x12C   0x6800             LDR      R0,[R0, #+0]
   \      0x12E   0xF3C0 0x2046      UBFX     R0,R0,#+9,#+7
   \      0x132   0x1C40             ADDS     R0,R0,#+1
   \      0x134   0xEE00 0x0A10      VMOV     S0,R0
    374              SystemCoreClock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
   \      0x138   0xEEB8 0x0A40      VCVT.F32.U32 S0,S0
   \      0x13C   0xEE80 0x0A80      VDIV.F32 S0,S1,S0
   \      0x140   0xEEBC 0x0AC0      VCVT.U32.F32 S0,S0
   \      0x144   0x....             LDR.N    R0,??DataTable1_27
   \      0x146   0xED80 0x0A00      VSTR     S0,[R0, #0]
    375          
    376              break;
   \      0x14A   0xE002             B.N      ??SystemCoreClockUpdate_5
    377          
    378            default:
    379              SystemCoreClock = HSI_VALUE;
   \                     ??SystemCoreClockUpdate_4: (+1)
   \      0x14C   0x....             LDR.N    R0,??DataTable1_26
   \      0x14E   0x....             LDR.N    R1,??DataTable1_27
   \      0x150   0x6008             STR      R0,[R1, #+0]
    380              break;
    381            }
    382            /* Compute HCLK clock frequency --------------------------------------------*/
    383            /* Get HCLK prescaler */
    384            tmp = AHBPrescTable[((RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos)];
   \                     ??SystemCoreClockUpdate_5: (+1)
   \      0x152   0x....             LDR.N    R0,??DataTable1_30
   \      0x154   0x....             LDR.N    R1,??DataTable1_7
   \      0x156   0x6809             LDR      R1,[R1, #+0]
   \      0x158   0xF011 0x010F      ANDS     R1,R1,#0xF
   \      0x15C   0x5C40             LDRB     R0,[R0, R1]
    385            /* HCLK clock frequency */
    386            SystemCoreClock >>= tmp;
   \      0x15E   0x....             LDR.N    R1,??DataTable1_27
   \      0x160   0x680A             LDR      R2,[R1, #+0]
   \      0x162   0x40C2             LSRS     R2,R2,R0
   \      0x164   0x600A             STR      R2,[R1, #+0]
    387          }
   \      0x166   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x4600'0000        DC32     0x46000000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x4A74'2400        DC32     0x4a742400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \        0x0   0x4BBE'BC20        DC32     0x4bbebc20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \        0x0   0x0000'0000        DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \        0x0   0xE000'ED88        DC32     0xe000ed88

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \        0x0   0x4402'0C00        DC32     0x44020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \        0x0   0x4402'0C1C        DC32     0x44020c1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \        0x0   0x4402'0C20        DC32     0x44020c20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \        0x0   0xEAE2'EAE3        DC32     0xeae2eae3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \        0x0   0x4402'0C28        DC32     0x44020c28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \        0x0   0x4402'0C2C        DC32     0x44020c2c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \        0x0   0x4402'0C30        DC32     0x44020c30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \        0x0   0x0101'0280        DC32     0x1010280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \        0x0   0x4402'0C34        DC32     0x44020c34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \        0x0   0x4402'0C38        DC32     0x44020c38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \        0x0   0x4402'0C3C        DC32     0x44020c3c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \        0x0   0x4402'0C40        DC32     0x44020c40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \        0x0   0x4402'0C44        DC32     0x44020c44

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \        0x0   0x4402'0C48        DC32     0x44020c48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \        0x0   0x4402'0C50        DC32     0x44020c50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \        0x0   0xE000'ED08        DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_21:
   \        0x0   0x4002'2018        DC32     0x40022018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_22:
   \        0x0   0x4002'201C        DC32     0x4002201c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_23:
   \        0x0   0x4002'200C        DC32     0x4002200c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_24:
   \        0x0   0x0819'2A3B        DC32     0x8192a3b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_25:
   \        0x0   0x4C5D'6E7F        DC32     0x4c5d6e7f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_26:
   \        0x0   0x03D0'9000        DC32     0x3d09000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_27:
   \        0x0   0x....'....        DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_28:
   \        0x0   0x003D'0900        DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_29:
   \        0x0   0x017D'7840        DC32     0x17d7840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_30:
   \        0x0   0x....'....        DC32     AHBPrescTable
    388          
    389          
    390          /**
    391            * @}
    392            */
    393          
    394          /**
    395            * @}
    396            */
    397          
    398          /**
    399            * @}
    400            */
    401          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SystemCoreClockUpdate
       0   SystemInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_21
       4  ??DataTable1_22
       4  ??DataTable1_23
       4  ??DataTable1_24
       4  ??DataTable1_25
       4  ??DataTable1_26
       4  ??DataTable1_27
       4  ??DataTable1_28
       4  ??DataTable1_29
       4  ??DataTable1_3
       4  ??DataTable1_30
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      16  AHBPrescTable
       8  APBPrescTable
       4  SystemCoreClock
     360  SystemCoreClockUpdate
     164  SystemInit

 
   4 bytes in section .data
  24 bytes in section .rodata
 648 bytes in section .text
 
 648 bytes of CODE  memory
  24 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
