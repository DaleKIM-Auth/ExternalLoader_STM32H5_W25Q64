###############################################################################
#
# IAR ANSI C/C++ Compiler V9.40.1.364/W64 for ARM         23/Nov/2023  21:46:10
# Copyright 1999-2023 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Source\Library\stm32h5xx_hal_cortex.c
#    Command line      =
#        -f
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\Obj\Library_12270351780628986503.dir\stm32h5xx_hal_cortex.o.rsp
#        (C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Source\Library\stm32h5xx_hal_cortex.c
#        -D STM32H562xx -lCN
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\List\Library_12270351780628986503.dir
#        -lA
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\List\Library_12270351780628986503.dir
#        -o
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\Obj\Library_12270351780628986503.dir
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M33.no_dsp.no_se -e --fpu=VFPv5_sp --dlib_config
#        "C:\Program Files\IAR Systems\Embedded Workbench
#        9.2\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\..\Includes\CMSIS\
#        -I
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\..\Includes\Library\
#        -I
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\..\Includes\Loader\
#        -Ol) --dependencies=n
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\Obj\Library_12270351780628986503.dir\stm32h5xx_hal_cortex.o.iar_deps
#    Locale            =  C
#    List file         =
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\List\Library_12270351780628986503.dir\stm32h5xx_hal_cortex.lst
#    Object file       =
#        C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Project\W25Q64JV_STM32H562\Obj\Library_12270351780628986503.dir\stm32h5xx_hal_cortex.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Workspace\W25Q64JV_STM32H562_FlashLoader\Source\Library\stm32h5xx_hal_cortex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32h5xx_hal_cortex.c
      4            * @author  MCD Application Team
      5            * @brief   CORTEX HAL module driver.
      6            *          This file provides firmware functions to manage the following
      7            *          functionalities of the CORTEX:
      8            *           + Initialization and Configuration functions
      9            *           + Peripheral Control functions
     10            *
     11            ******************************************************************************
     12            * @attention
     13            *
     14            * Copyright (c) 2023 STMicroelectronics.
     15            * All rights reserved.
     16            *
     17            * This software is licensed under terms that can be found in the LICENSE file
     18            * in the root directory of this software component.
     19            * If no LICENSE file comes with this software, it is provided AS-IS.
     20            *
     21            ******************************************************************************
     22            @verbatim
     23            ==============================================================================
     24                                  ##### How to use this driver #####
     25            ==============================================================================
     26          
     27              [..]
     28              *** How to configure Interrupts using CORTEX HAL driver ***
     29              ===========================================================
     30              [..]
     31              This section provides functions allowing to configure the NVIC interrupts (IRQ).
     32              The Cortex-M33 exceptions are managed by CMSIS functions.
     33          
     34              (#) Configure the NVIC Priority Grouping using HAL_NVIC_SetPriorityGrouping() function.
     35              (#) Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority().
     36              (#) Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ().
     37          
     38               -@- When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
     39                   The pending IRQ priority will be managed only by the sub priority.
     40          
     41               -@- IRQ priority order (sorted by highest to lowest priority):
     42                  (+@) Lowest pre-emption priority
     43                  (+@) Lowest sub priority
     44                  (+@) Lowest hardware priority (IRQ number)
     45          
     46              [..]
     47              *** How to configure SysTick using CORTEX HAL driver ***
     48              ========================================================
     49              [..]
     50              Setup SysTick Timer for time base.
     51          
     52             (+) The HAL_SYSTICK_Config() function calls the SysTick_Config() function which
     53                 is a CMSIS function that:
     54                  (++) Configures the SysTick Reload register with value passed as function parameter.
     55                  (++) Configures the SysTick IRQ priority to the lowest value (0x0F).
     56                  (++) Resets the SysTick Counter register.
     57                  (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
     58                  (++) Enables the SysTick Interrupt.
     59                  (++) Starts the SysTick Counter.
     60          
     61             (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
     62                 __HAL_CORTEX_SYSTICKCLK_CONFIG(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
     63                 HAL_SYSTICK_Config() function call. The __HAL_CORTEX_SYSTICKCLK_CONFIG() macro is defined
     64                 inside the stm32h5xx_hal_cortex.h file.
     65          
     66             (+) You can change the SysTick IRQ priority by calling the
     67                 HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
     68                 call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS function.
     69          
     70             (+) To adjust the SysTick time base, use the following formula:
     71          
     72                 Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
     73                 (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
     74                 (++) Reload Value should not exceed 0xFFFFFF
     75          
     76              [..]
     77              *** How to configure MPU (secure and non secure) using CORTEX HAL driver ***
     78              ===========================================================
     79              [..]
     80              This section provides functions allowing to Enable and configure the MPU secure and non-secure.
     81          
     82              (#) Enable the MPU using HAL_MPU_Enable() function.
     83              (#) Disable the MPU using HAL_MPU_Disable() function.
     84              (#) Enable the MPU using HAL_MPU_Enable_NS() function to address the non secure MPU.
     85              (#) Disable the MPU using HAL_MPU_Disable_NS() function to address the non secure MPU.
     86              (#) Configure the MPU region using HAL_MPU_ConfigRegion()
     87                  and HAL_MPU_ConfigRegion_NS() to address the non secure MPU.
     88              (#) Configure the MPU Memory attributes using HAL_MPU_ConfigMemoryAttributes()
     89                  and HAL_MPU_ConfigMemoryAttributes_NS() to address the non secure MPU.
     90          
     91            @endverbatim
     92            ******************************************************************************
     93          
     94            The table below gives the allowed values of the pre-emption priority and subpriority according
     95            to the Priority Grouping configuration performed by HAL_NVIC_SetPriorityGrouping() function.
     96          
     97          ========================================================================================================================
     98            NVIC_PriorityGroup  | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority |       Description
     99          ========================================================================================================================
    100           NVIC_PRIORITYGROUP_0 |                0                  |            0-15            | 0 bit for pre-emption priority
    101                                |                                   |                            | 4 bits for subpriority
    102          ------------------------------------------------------------------------------------------------------------------------
    103           NVIC_PRIORITYGROUP_1 |                0-1                |            0-7             | 1 bit for pre-emption priority
    104                                |                                   |                            | 3 bits for subpriority
    105          ------------------------------------------------------------------------------------------------------------------------
    106           NVIC_PRIORITYGROUP_2 |                0-3                |            0-3             | 2 bits for pre-emption priority
    107                                |                                   |                            | 2 bits for subpriority
    108          ------------------------------------------------------------------------------------------------------------------------
    109           NVIC_PRIORITYGROUP_3 |                0-7                |            0-1             | 3 bits for pre-emption priority
    110                                |                                   |                            | 1 bit for subpriority
    111          ------------------------------------------------------------------------------------------------------------------------
    112           NVIC_PRIORITYGROUP_4 |                0-15               |            0               | 4 bits for pre-emption priority
    113                                |                                   |                            | 0 bit for subpriority
    114          ========================================================================================================================
    115            */
    116          
    117          /* Includes ------------------------------------------------------------------*/
    118          #include "stm32h5xx_hal.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void __NVIC_SetPriorityGrouping(uint32_t)
   \                     __NVIC_SetPriorityGrouping: (+1)
   \        0x0   0xF010 0x0007      ANDS     R0,R0,#0x7
   \        0x4   0x.... 0x....      LDR.W    R3,??DataTable16
   \        0x8   0x681A             LDR      R2,[R3, #+0]
   \        0xA   0xF64F 0x01FF      MOVW     R1,#+63743
   \        0xE   0x400A             ANDS     R2,R1,R2
   \       0x10   0xEA52 0x2200      ORRS     R2,R2,R0, LSL #+8
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable16_1
   \       0x18   0x4302             ORRS     R2,R0,R2
   \       0x1A   0x601A             STR      R2,[R3, #+0]
   \       0x1C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp uint32_t __NVIC_GetPriorityGrouping(void)
   \                     __NVIC_GetPriorityGrouping: (+1)
   \        0x0   0x.... 0x....      LDR.W    R0,??DataTable16
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0xF3C0 0x2002      UBFX     R0,R0,#+8,#+3
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \   static __vfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB209             SXTH     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD408             BMI.N    ??__NVIC_EnableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable16_2
   \       0x12   0xB200             SXTH     R0,R0
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \       0x1A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void __NVIC_DisableIRQ(IRQn_Type)
   \                     __NVIC_DisableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB209             SXTH     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD40C             BMI.N    ??__NVIC_DisableIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable16_3
   \       0x12   0xB200             SXTH     R0,R0
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \       0x1A   0xF3BF 0x8F4F      DSB      SY
   \       0x1E   0xF3BF 0x8F6F      ISB      SY
   \                     ??__NVIC_DisableIRQ_0: (+1)
   \       0x22   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp uint32_t __NVIC_GetPendingIRQ(IRQn_Type)
   \                     __NVIC_GetPendingIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB200             SXTH     R0,R0
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD40B             BMI.N    ??__NVIC_GetPendingIRQ_0
   \        0xA   0x....             LDR.N    R0,??DataTable16_4
   \        0xC   0x000A             MOVS     R2,R1
   \        0xE   0xB212             SXTH     R2,R2
   \       0x10   0x0952             LSRS     R2,R2,#+5
   \       0x12   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \       0x16   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \       0x1A   0x40C8             LSRS     R0,R0,R1
   \       0x1C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \       0x20   0xE000             B.N      ??__NVIC_GetPendingIRQ_1
   \                     ??__NVIC_GetPendingIRQ_0: (+1)
   \       0x22   0x2000             MOVS     R0,#+0
   \                     ??__NVIC_GetPendingIRQ_1: (+1)
   \       0x24   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void __NVIC_SetPendingIRQ(IRQn_Type)
   \                     __NVIC_SetPendingIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB209             SXTH     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD408             BMI.N    ??__NVIC_SetPendingIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable16_4
   \       0x12   0xB200             SXTH     R0,R0
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_SetPendingIRQ_0: (+1)
   \       0x1A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void __NVIC_ClearPendingIRQ(IRQn_Type)
   \                     __NVIC_ClearPendingIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB209             SXTH     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD408             BMI.N    ??__NVIC_ClearPendingIRQ_0
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0xE   0x408A             LSLS     R2,R2,R1
   \       0x10   0x....             LDR.N    R1,??DataTable16_5
   \       0x12   0xB200             SXTH     R0,R0
   \       0x14   0x0940             LSRS     R0,R0,#+5
   \       0x16   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_ClearPendingIRQ_0: (+1)
   \       0x1A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp uint32_t __NVIC_GetActive(IRQn_Type)
   \                     __NVIC_GetActive: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB200             SXTH     R0,R0
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD40B             BMI.N    ??__NVIC_GetActive_0
   \        0xA   0x....             LDR.N    R0,??DataTable16_6
   \        0xC   0x000A             MOVS     R2,R1
   \        0xE   0xB212             SXTH     R2,R2
   \       0x10   0x0952             LSRS     R2,R2,#+5
   \       0x12   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \       0x16   0xF011 0x011F      ANDS     R1,R1,#0x1F
   \       0x1A   0x40C8             LSRS     R0,R0,R1
   \       0x1C   0xF010 0x0001      ANDS     R0,R0,#0x1
   \       0x20   0xE000             B.N      ??__NVIC_GetActive_1
   \                     ??__NVIC_GetActive_0: (+1)
   \       0x22   0x2000             MOVS     R0,#+0
   \                     ??__NVIC_GetActive_1: (+1)
   \       0x24   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void __NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     __NVIC_SetPriority: (+1)
   \        0x0   0x0002             MOVS     R2,R0
   \        0x2   0xB212             SXTH     R2,R2
   \        0x4   0x2A00             CMP      R2,#+0
   \        0x6   0xD404             BMI.N    ??__NVIC_SetPriority_0
   \        0x8   0x0109             LSLS     R1,R1,#+4
   \        0xA   0x....             LDR.N    R2,??DataTable16_7
   \        0xC   0xB200             SXTH     R0,R0
   \        0xE   0x5411             STRB     R1,[R2, R0]
   \       0x10   0xE007             B.N      ??__NVIC_SetPriority_1
   \                     ??__NVIC_SetPriority_0: (+1)
   \       0x12   0x0109             LSLS     R1,R1,#+4
   \       0x14   0x....             LDR.N    R2,??DataTable16_8
   \       0x16   0xB200             SXTH     R0,R0
   \       0x18   0xF010 0x000F      ANDS     R0,R0,#0xF
   \       0x1C   0x4410             ADD      R0,R2,R0
   \       0x1E   0xF800 0x1C04      STRB     R1,[R0, #-4]
   \                     ??__NVIC_SetPriority_1: (+1)
   \       0x22   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp uint32_t __NVIC_GetPriority(IRQn_Type)
   \                     __NVIC_GetPriority: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xB209             SXTH     R1,R1
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD404             BMI.N    ??__NVIC_GetPriority_0
   \        0x8   0x....             LDR.N    R1,??DataTable16_7
   \        0xA   0xB200             SXTH     R0,R0
   \        0xC   0x5C08             LDRB     R0,[R1, R0]
   \        0xE   0x0900             LSRS     R0,R0,#+4
   \       0x10   0xE007             B.N      ??__NVIC_GetPriority_1
   \                     ??__NVIC_GetPriority_0: (+1)
   \       0x12   0x....             LDR.N    R1,??DataTable16_8
   \       0x14   0xB200             SXTH     R0,R0
   \       0x16   0xF010 0x000F      ANDS     R0,R0,#0xF
   \       0x1A   0x4408             ADD      R0,R1,R0
   \       0x1C   0xF810 0x0C04      LDRB     R0,[R0, #-4]
   \       0x20   0x0900             LSRS     R0,R0,#+4
   \                     ??__NVIC_GetPriority_1: (+1)
   \       0x22   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp uint32_t NVIC_EncodePriority(uint32_t, uint32_t, uint32_t)
   \                     NVIC_EncodePriority: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0xF010 0x0007      ANDS     R0,R0,#0x7
   \        0x6   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \        0xA   0x2B05             CMP      R3,#+5
   \        0xC   0xD301             BCC.N    ??NVIC_EncodePriority_0
   \        0xE   0x2304             MOVS     R3,#+4
   \       0x10   0xE001             B.N      ??NVIC_EncodePriority_1
   \                     ??NVIC_EncodePriority_0: (+1)
   \       0x12   0xF1D0 0x0307      RSBS     R3,R0,#+7
   \                     ??NVIC_EncodePriority_1: (+1)
   \       0x16   0x1D04             ADDS     R4,R0,#+4
   \       0x18   0x2C07             CMP      R4,#+7
   \       0x1A   0xD201             BCS.N    ??NVIC_EncodePriority_2
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0xE000             B.N      ??NVIC_EncodePriority_3
   \                     ??NVIC_EncodePriority_2: (+1)
   \       0x20   0x1EC0             SUBS     R0,R0,#+3
   \                     ??NVIC_EncodePriority_3: (+1)
   \       0x22   0x2401             MOVS     R4,#+1
   \       0x24   0xFA14 0xF303      LSLS     R3,R4,R3
   \       0x28   0x1E5B             SUBS     R3,R3,#+1
   \       0x2A   0x4019             ANDS     R1,R3,R1
   \       0x2C   0x4081             LSLS     R1,R1,R0
   \       0x2E   0xFA14 0xF000      LSLS     R0,R4,R0
   \       0x32   0x1E40             SUBS     R0,R0,#+1
   \       0x34   0x4010             ANDS     R0,R0,R2
   \       0x36   0x4308             ORRS     R0,R0,R1
   \       0x38   0xBC10             POP      {R4}
   \       0x3A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void NVIC_DecodePriority(uint32_t, uint32_t, uint32_t *const, uint32_t *const)
   \                     NVIC_DecodePriority: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0xF011 0x0107      ANDS     R1,R1,#0x7
   \        0x6   0xF1D1 0x0407      RSBS     R4,R1,#+7
   \        0xA   0x2C05             CMP      R4,#+5
   \        0xC   0xD301             BCC.N    ??NVIC_DecodePriority_0
   \        0xE   0x2404             MOVS     R4,#+4
   \       0x10   0xE001             B.N      ??NVIC_DecodePriority_1
   \                     ??NVIC_DecodePriority_0: (+1)
   \       0x12   0xF1D1 0x0407      RSBS     R4,R1,#+7
   \                     ??NVIC_DecodePriority_1: (+1)
   \       0x16   0x1D0D             ADDS     R5,R1,#+4
   \       0x18   0x2D07             CMP      R5,#+7
   \       0x1A   0xD201             BCS.N    ??NVIC_DecodePriority_2
   \       0x1C   0x2100             MOVS     R1,#+0
   \       0x1E   0xE000             B.N      ??NVIC_DecodePriority_3
   \                     ??NVIC_DecodePriority_2: (+1)
   \       0x20   0x1EC9             SUBS     R1,R1,#+3
   \                     ??NVIC_DecodePriority_3: (+1)
   \       0x22   0x2501             MOVS     R5,#+1
   \       0x24   0x0006             MOVS     R6,R0
   \       0x26   0x40CE             LSRS     R6,R6,R1
   \       0x28   0xFA15 0xF404      LSLS     R4,R5,R4
   \       0x2C   0x1E64             SUBS     R4,R4,#+1
   \       0x2E   0x4034             ANDS     R4,R4,R6
   \       0x30   0x6014             STR      R4,[R2, #+0]
   \       0x32   0xFA15 0xF101      LSLS     R1,R5,R1
   \       0x36   0x1E49             SUBS     R1,R1,#+1
   \       0x38   0x4008             ANDS     R0,R1,R0
   \       0x3A   0x6018             STR      R0,[R3, #+0]
   \       0x3C   0xBC70             POP      {R4-R6}
   \       0x3E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void __NVIC_SystemReset(void)
   \                     __NVIC_SystemReset: (+1)
   \        0x0   0xF3BF 0x8F4F      DSB      SY
   \        0x4   0x....             LDR.N    R1,??DataTable16
   \        0x6   0x680A             LDR      R2,[R1, #+0]
   \        0x8   0xF412 0x62E0      ANDS     R2,R2,#0x700
   \        0xC   0x....             LDR.N    R0,??DataTable16_9
   \        0xE   0x4302             ORRS     R2,R0,R2
   \       0x10   0x600A             STR      R2,[R1, #+0]
   \       0x12   0xF3BF 0x8F4F      DSB      SY
   \                     ??__NVIC_SystemReset_0: (+1)
   \       0x16   0xBF00             Nop
   \       0x18   0xE7FD             B.N      ??__NVIC_SystemReset_0

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp uint32_t SysTick_Config(uint32_t)
   \                     SysTick_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x1E41             SUBS     R1,R0,#+1
   \        0x4   0xF1B1 0x7F80      CMP      R1,#+16777216
   \        0x8   0xD301             BCC.N    ??SysTick_Config_0
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE00E             B.N      ??SysTick_Config_1
   \                     ??SysTick_Config_0: (+1)
   \        0xE   0x1E40             SUBS     R0,R0,#+1
   \       0x10   0x....             LDR.N    R1,??DataTable16_10
   \       0x12   0x6008             STR      R0,[R1, #+0]
   \       0x14   0x210F             MOVS     R1,#+15
   \       0x16   0xF05F 0x30FF      MOVS     R0,#+4294967295
   \       0x1A   0x.... 0x....      BL       __NVIC_SetPriority
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0x....             LDR.N    R1,??DataTable16_11
   \       0x22   0x6008             STR      R0,[R1, #+0]
   \       0x24   0x2007             MOVS     R0,#+7
   \       0x26   0x....             LDR.N    R1,??DataTable16_12
   \       0x28   0x6008             STR      R0,[R1, #+0]
   \       0x2A   0x2000             MOVS     R0,#+0
   \                     ??SysTick_Config_1: (+1)
   \       0x2C   0xBD02             POP      {R1,PC}
    119          
    120          /** @addtogroup STM32H5xx_HAL_Driver
    121            * @{
    122            */
    123          
    124          /** @addtogroup CORTEX
    125            * @{
    126            */
    127          
    128          #ifdef HAL_CORTEX_MODULE_ENABLED
    129          
    130          /* Private types -------------------------------------------------------------*/
    131          /* Private variables ---------------------------------------------------------*/
    132          /* Private constants ---------------------------------------------------------*/
    133          /* Private macros ------------------------------------------------------------*/
    134          /* Private functions ---------------------------------------------------------*/
    135          /** @defgroup CORTEX_Private_Functions CORTEX Private Functions
    136            * @{
    137            */
    138          static void MPU_ConfigRegion(MPU_Type *MPUx, const MPU_Region_InitTypeDef *const pMPU_RegionInit);
    139          static void MPU_ConfigMemoryAttributes(MPU_Type *MPUx, const MPU_Attributes_InitTypeDef *const pMPU_AttributesInit);
    140          /**
    141            * @}
    142            */
    143          /* Exported functions --------------------------------------------------------*/
    144          
    145          /** @addtogroup CORTEX_Exported_Functions
    146            * @{
    147            */
    148          
    149          
    150          /** @addtogroup CORTEX_Exported_Functions_Group1
    151            *  @brief    NVIC functions
    152            *
    153          @verbatim
    154            ==============================================================================
    155                                    ##### NVIC functions #####
    156            ==============================================================================
    157              [..]
    158                This section provides the CORTEX HAL driver functions for NVIC functionalities
    159          
    160          @endverbatim
    161            * @{
    162            */
    163          
    164          
    165          /**
    166            * @brief  Set the priority grouping field (pre-emption priority and subpriority)
    167            *         using the required unlock sequence.
    168            * @param  PriorityGroup: The priority grouping bits length.
    169            *         This parameter can be one of the following values:
    170            *         @arg NVIC_PRIORITYGROUP_0: 0 bit  for pre-emption priority,
    171            *                                    4 bits for subpriority
    172            *         @arg NVIC_PRIORITYGROUP_1: 1 bit  for pre-emption priority,
    173            *                                    3 bits for subpriority
    174            *         @arg NVIC_PRIORITYGROUP_2: 2 bits for pre-emption priority,
    175            *                                    2 bits for subpriority
    176            *         @arg NVIC_PRIORITYGROUP_3: 3 bits for pre-emption priority,
    177            *                                    1 bit  for subpriority
    178            *         @arg NVIC_PRIORITYGROUP_4: 4 bits for pre-emption priority,
    179            *                                    0 bit  for subpriority
    180            * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
    181            *         The pending IRQ priority will be managed only by the subpriority.
    182            * @retval None
    183            */

   \                                 In section .text, align 2, keep-with-next
    184          void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
    185          {
   \                     HAL_NVIC_SetPriorityGrouping: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    186            /* Check the parameters */
    187            assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
    188          
    189            /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    190            NVIC_SetPriorityGrouping(PriorityGroup);
   \        0x2   0x.... 0x....      BL       __NVIC_SetPriorityGrouping
    191          }
   \        0x6   0xBD01             POP      {R0,PC}
    192          
    193          /**
    194            * @brief  Set the priority of an interrupt.
    195            * @param  IRQn: External interrupt number.
    196            *         This parameter can be an enumerator of IRQn_Type enumeration
    197            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
    198            *          CMSIS device file (stm32h5xxxx.h))
    199            * @param  PreemptPriority: The pre-emption priority for the IRQn channel.
    200            *         This parameter can be a value between 0 and 15
    201            *         A lower priority value indicates a higher priority
    202            * @param  SubPriority: the subpriority level for the IRQ channel.
    203            *         This parameter can be a value between 0 and 15
    204            *         A lower priority value indicates a higher priority.
    205            * @retval None
    206            */

   \                                 In section .text, align 2, keep-with-next
    207          void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
    208          {
   \                     HAL_NVIC_SetPriority: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    209            uint32_t prioritygroup;
    210          
    211            /* Check the parameters */
    212            assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    213            assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
    214          
    215            prioritygroup = NVIC_GetPriorityGrouping();
   \        0x8   0x.... 0x....      BL       __NVIC_GetPriorityGrouping
    216          
    217            NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
   \        0xC   0x0032             MOVS     R2,R6
   \        0xE   0x0029             MOVS     R1,R5
   \       0x10   0x.... 0x....      BL       NVIC_EncodePriority
   \       0x14   0x0001             MOVS     R1,R0
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0xB200             SXTH     R0,R0
   \       0x1A   0x.... 0x....      BL       __NVIC_SetPriority
    218          }
   \       0x1E   0xBD70             POP      {R4-R6,PC}
    219          
    220          /**
    221            * @brief  Enable a device specific interrupt in the NVIC interrupt controller.
    222            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    223            *         function should be called before.
    224            * @param  IRQn External interrupt number.
    225            *         This parameter can be an enumerator of IRQn_Type enumeration
    226            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
    227            *          CMSIS device file (stm32h5xxxx.h))
    228            * @retval None
    229            */

   \                                 In section .text, align 2, keep-with-next
    230          void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
    231          {
   \                     HAL_NVIC_EnableIRQ: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    232            /* Check the parameters */
    233            assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    234          
    235            /* Enable interrupt */
    236            NVIC_EnableIRQ(IRQn);
   \        0x2   0xB200             SXTH     R0,R0
   \        0x4   0x.... 0x....      BL       __NVIC_EnableIRQ
    237          }
   \        0x8   0xBD01             POP      {R0,PC}
    238          
    239          /**
    240            * @brief  Disable a device specific interrupt in the NVIC interrupt controller.
    241            * @param  IRQn External interrupt number.
    242            *         This parameter can be an enumerator of IRQn_Type enumeration
    243            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
    244            *          CMSIS device file (stm32h5xxxx.h))
    245            * @retval None
    246            */

   \                                 In section .text, align 2, keep-with-next
    247          void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
    248          {
   \                     HAL_NVIC_DisableIRQ: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    249            /* Check the parameters */
    250            assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    251          
    252            /* Disable interrupt */
    253            NVIC_DisableIRQ(IRQn);
   \        0x2   0xB200             SXTH     R0,R0
   \        0x4   0x.... 0x....      BL       __NVIC_DisableIRQ
    254          }
   \        0x8   0xBD01             POP      {R0,PC}
    255          
    256          /**
    257            * @brief  Initiate a system reset request to reset the MCU.
    258            * @retval None
    259            */

   \                                 In section .text, align 2, keep-with-next
    260          void HAL_NVIC_SystemReset(void)
    261          {
   \                     HAL_NVIC_SystemReset: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    262            /* System Reset */
    263            NVIC_SystemReset();
   \        0x2   0x.... 0x....      BL       __NVIC_SystemReset
    264          }
   \        0x6   0xBD01             POP      {R0,PC}
    265          
    266          /**
    267            * @brief  Get the priority grouping field from the NVIC Interrupt Controller.
    268            * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
    269            */

   \                                 In section .text, align 2, keep-with-next
    270          uint32_t HAL_NVIC_GetPriorityGrouping(void)
    271          {
   \                     HAL_NVIC_GetPriorityGrouping: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    272            /* Get the PRIGROUP[10:8] field value */
    273            return NVIC_GetPriorityGrouping();
   \        0x2   0x.... 0x....      BL       __NVIC_GetPriorityGrouping
   \        0x6   0xBD02             POP      {R1,PC}
    274          }
    275          
    276          /**
    277            * @brief  Get the priority of an interrupt.
    278            * @param  IRQn: External interrupt number.
    279            *         This parameter can be an enumerator of IRQn_Type enumeration
    280            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
    281            *          CMSIS device file (stm32h5xxxx.h))
    282            * @param   PriorityGroup: the priority grouping bits length.
    283            *         This parameter can be one of the following values:
    284            *           @arg NVIC_PRIORITYGROUP_0: 0 bit for pre-emption priority,
    285            *                                      4 bits for subpriority
    286            *           @arg NVIC_PRIORITYGROUP_1: 1 bit for pre-emption priority,
    287            *                                      3 bits for subpriority
    288            *           @arg NVIC_PRIORITYGROUP_2: 2 bits for pre-emption priority,
    289            *                                      2 bits for subpriority
    290            *           @arg NVIC_PRIORITYGROUP_3: 3 bits for pre-emption priority,
    291            *                                      1 bit for subpriority
    292            *           @arg NVIC_PRIORITYGROUP_4: 4 bits for pre-emption priority,
    293            *                                      0 bit for subpriority
    294            * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
    295            * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
    296            * @retval None
    297            */

   \                                 In section .text, align 2, keep-with-next
    298          void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *const pPreemptPriority,
    299                                    uint32_t *const pSubPriority)
    300          {
   \                     HAL_NVIC_GetPriority: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x000C             MOVS     R4,R1
   \        0x4   0x0015             MOVS     R5,R2
   \        0x6   0x001E             MOVS     R6,R3
    301            /* Check the parameters */
    302            assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
    303            /* Get priority for Cortex-M system or device specific interrupts */
    304            NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
   \        0x8   0xB200             SXTH     R0,R0
   \        0xA   0x.... 0x....      BL       __NVIC_GetPriority
   \        0xE   0x0033             MOVS     R3,R6
   \       0x10   0x002A             MOVS     R2,R5
   \       0x12   0x0021             MOVS     R1,R4
   \       0x14   0x.... 0x....      BL       NVIC_DecodePriority
    305          }
   \       0x18   0xBD70             POP      {R4-R6,PC}
    306          
    307          /**
    308            * @brief  Set Pending bit of an external interrupt.
    309            * @param  IRQn External interrupt number
    310            *         This parameter can be an enumerator of IRQn_Type enumeration
    311            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
    312            *          CMSIS device file (stm32h5xxxx.h))
    313            * @retval None
    314            */

   \                                 In section .text, align 2, keep-with-next
    315          void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
    316          {
   \                     HAL_NVIC_SetPendingIRQ: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    317            /* Set interrupt pending */
    318            NVIC_SetPendingIRQ(IRQn);
   \        0x2   0xB200             SXTH     R0,R0
   \        0x4   0x.... 0x....      BL       __NVIC_SetPendingIRQ
    319          }
   \        0x8   0xBD01             POP      {R0,PC}
    320          
    321          /**
    322            * @brief  Get Pending Interrupt (read the pending register in the NVIC
    323            *         and return the pending bit for the specified interrupt).
    324            * @param  IRQn External interrupt number.
    325            *         This parameter can be an enumerator of IRQn_Type enumeration
    326            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
    327            *          CMSIS device file (stm32h5xxxx.h))
    328            * @retval status: - 0  Interrupt status is not pending.
    329            *                 - 1  Interrupt status is pending.
    330            */

   \                                 In section .text, align 2, keep-with-next
    331          uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
    332          {
   \                     HAL_NVIC_GetPendingIRQ: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    333            /* Return 1 if pending else 0 */
    334            return NVIC_GetPendingIRQ(IRQn);
   \        0x2   0xB200             SXTH     R0,R0
   \        0x4   0x.... 0x....      BL       __NVIC_GetPendingIRQ
   \        0x8   0xBD02             POP      {R1,PC}
    335          }
    336          
    337          /**
    338            * @brief  Clear the pending bit of an external interrupt.
    339            * @param  IRQn External interrupt number.
    340            *         This parameter can be an enumerator of IRQn_Type enumeration
    341            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
    342            *          CMSIS device file (stm32h5xxxx.h))
    343            * @retval None
    344            */

   \                                 In section .text, align 2, keep-with-next
    345          void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
    346          {
   \                     HAL_NVIC_ClearPendingIRQ: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    347            /* Clear pending interrupt */
    348            NVIC_ClearPendingIRQ(IRQn);
   \        0x2   0xB200             SXTH     R0,R0
   \        0x4   0x.... 0x....      BL       __NVIC_ClearPendingIRQ
    349          }
   \        0x8   0xBD01             POP      {R0,PC}
    350          
    351          /**
    352            * @brief Get active interrupt (read the active register in NVIC and return the active bit).
    353            * @param IRQn External interrupt number
    354            *         This parameter can be an enumerator of IRQn_Type enumeration
    355            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
    356            *          CMSIS device file (stm32h5xxxx.h))
    357            * @retval status: - 0  Interrupt status is not pending.
    358            *                 - 1  Interrupt status is pending.
    359            */

   \                                 In section .text, align 2, keep-with-next
    360          uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
    361          {
   \                     HAL_NVIC_GetActive: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    362            /* Return 1 if active else 0 */
    363            return NVIC_GetActive(IRQn);
   \        0x2   0xB200             SXTH     R0,R0
   \        0x4   0x.... 0x....      BL       __NVIC_GetActive
   \        0x8   0xBD02             POP      {R1,PC}
    364          }
    365          
    366          /**
    367            * @}
    368            */
    369          
    370          
    371          /** @addtogroup CORTEX_Exported_Functions_Group2
    372            *  @brief   SYSTICK functions
    373            *
    374          @verbatim
    375            ==============================================================================
    376                                    ##### SYSTICK functions #####
    377            ==============================================================================
    378              [..]
    379                This section provides the CORTEX HAL driver functions for SYSTICK functionalities
    380          
    381          
    382          @endverbatim
    383            * @{
    384            */
    385          
    386          /**
    387            * @brief  Initialize the System Timer with interrupt enabled and start the System Tick Timer (SysTick):
    388            *         Counter is in free running mode to generate periodic interrupts.
    389            * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
    390            * @retval status:  - 0  Function succeeded.
    391            *                  - 1  Function failed.
    392            */

   \                                 In section .text, align 2, keep-with-next
    393          uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
    394          {
   \                     HAL_SYSTICK_Config: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    395            return SysTick_Config(TicksNumb);
   \        0x2   0x.... 0x....      BL       SysTick_Config
   \        0x6   0xBD02             POP      {R1,PC}
    396          }
    397          
    398          /**
    399            * @brief  Configure the SysTick clock source.
    400            * @param  CLKSource: specifies the SysTick clock source.
    401            *          This parameter can be one of the following values:
    402            *             @arg SYSTICK_CLKSOURCE_LSI: LSI clock selected as SysTick clock source.
    403            *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
    404            *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
    405            *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
    406            * @retval None
    407            */

   \                                 In section .text, align 2, keep-with-next
    408          void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
    409          {
    410            /* Check the parameters */
    411            assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
    412            switch (CLKSource)
   \                     HAL_SYSTICK_CLKSourceConfig: (+1)
   \        0x0   0x2800             CMP      R0,#+0
   \        0x2   0xD00B             BEQ.N    ??HAL_SYSTICK_CLKSourceConfig_0
   \        0x4   0x2801             CMP      R0,#+1
   \        0x6   0xD014             BEQ.N    ??HAL_SYSTICK_CLKSourceConfig_1
   \        0x8   0x2802             CMP      R0,#+2
   \        0xA   0xD01E             BEQ.N    ??HAL_SYSTICK_CLKSourceConfig_2
   \        0xC   0x2804             CMP      R0,#+4
   \        0xE   0xD128             BNE.N    ??HAL_SYSTICK_CLKSourceConfig_3
    413            {
    414              /* Select HCLK as Systick clock source */
    415              case SYSTICK_CLKSOURCE_HCLK:
    416                SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
   \                     ??HAL_SYSTICK_CLKSourceConfig_4: (+1)
   \       0x10   0x....             LDR.N    R0,??DataTable16_12
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0xF051 0x0104      ORRS     R1,R1,#0x4
   \       0x18   0x6001             STR      R1,[R0, #+0]
    417                break;
   \       0x1A   0xE022             B.N      ??HAL_SYSTICK_CLKSourceConfig_5
    418              /* Select HCLK_DIV8 as Systick clock source */
    419              case SYSTICK_CLKSOURCE_HCLK_DIV8:
    420                CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
   \                     ??HAL_SYSTICK_CLKSourceConfig_0: (+1)
   \       0x1C   0x....             LDR.N    R0,??DataTable16_12
   \       0x1E   0x6801             LDR      R1,[R0, #+0]
   \       0x20   0xF031 0x0104      BICS     R1,R1,#0x4
   \       0x24   0x6001             STR      R1,[R0, #+0]
    421                MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
   \       0x26   0x....             LDR.N    R0,??DataTable16_13
   \       0x28   0x6801             LDR      R1,[R0, #+0]
   \       0x2A   0xF031 0x010C      BICS     R1,R1,#0xC
   \       0x2E   0x6001             STR      R1,[R0, #+0]
    422                break;
   \       0x30   0xE017             B.N      ??HAL_SYSTICK_CLKSourceConfig_5
    423              /* Select LSI as Systick clock source */
    424              case SYSTICK_CLKSOURCE_LSI:
    425                CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
   \                     ??HAL_SYSTICK_CLKSourceConfig_1: (+1)
   \       0x32   0x....             LDR.N    R0,??DataTable16_12
   \       0x34   0x6801             LDR      R1,[R0, #+0]
   \       0x36   0xF031 0x0104      BICS     R1,R1,#0x4
   \       0x3A   0x6001             STR      R1,[R0, #+0]
    426                MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
   \       0x3C   0x....             LDR.N    R0,??DataTable16_13
   \       0x3E   0x2101             MOVS     R1,#+1
   \       0x40   0x6802             LDR      R2,[R0, #+0]
   \       0x42   0xF361 0x0283      BFI      R2,R1,#+2,#+2
   \       0x46   0x6002             STR      R2,[R0, #+0]
    427                break;
   \       0x48   0xE00B             B.N      ??HAL_SYSTICK_CLKSourceConfig_5
    428              /* Select LSE as Systick clock source */
    429              case SYSTICK_CLKSOURCE_LSE:
    430                CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
   \                     ??HAL_SYSTICK_CLKSourceConfig_2: (+1)
   \       0x4A   0x....             LDR.N    R0,??DataTable16_12
   \       0x4C   0x6801             LDR      R1,[R0, #+0]
   \       0x4E   0xF031 0x0104      BICS     R1,R1,#0x4
   \       0x52   0x6001             STR      R1,[R0, #+0]
    431                MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
   \       0x54   0x....             LDR.N    R0,??DataTable16_13
   \       0x56   0x2102             MOVS     R1,#+2
   \       0x58   0x6802             LDR      R2,[R0, #+0]
   \       0x5A   0xF361 0x0283      BFI      R2,R1,#+2,#+2
   \       0x5E   0x6002             STR      R2,[R0, #+0]
    432                break;
   \       0x60   0xE7FF             B.N      ??HAL_SYSTICK_CLKSourceConfig_5
    433              default:
    434                /* Nothing to do */
    435                break;
    436            }
    437          }
   \                     ??HAL_SYSTICK_CLKSourceConfig_3: (+1)
   \                     ??HAL_SYSTICK_CLKSourceConfig_5: (+1)
   \       0x62   0x4770             BX       LR
    438          
    439          /**
    440            * @brief  Handle SYSTICK interrupt request.
    441            * @retval None
    442            */

   \                                 In section .text, align 2, keep-with-next
    443          void HAL_SYSTICK_IRQHandler(void)
    444          {
   \                     HAL_SYSTICK_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    445            HAL_SYSTICK_Callback();
   \        0x2   0x.... 0x....      BL       HAL_SYSTICK_Callback
    446          }
   \        0x6   0xBD01             POP      {R0,PC}
    447          
    448          /**
    449            * @brief  SYSTICK callback.
    450            * @retval None
    451            */

   \                                 In section .text, align 2
    452          __weak void HAL_SYSTICK_Callback(void)
    453          {
    454            /* NOTE : This function should not be modified, when the callback is needed,
    455                      the HAL_SYSTICK_Callback could be implemented in the user file
    456             */
    457          }
   \                     HAL_SYSTICK_Callback: (+1)
   \        0x0   0x4770             BX       LR
    458          
    459          /**
    460            * @}
    461            */
    462          
    463          /** @addtogroup CORTEX_Exported_Functions_Group3
    464            *  @brief   MPU functions
    465            *
    466          @verbatim
    467            ==============================================================================
    468                                   ##### MPU functions #####
    469            ==============================================================================
    470              [..]
    471                This section provides the CORTEX HAL driver functions for MPU functionalities
    472          
    473          
    474          @endverbatim
    475            * @{
    476            */
    477          
    478          /**
    479            * @brief  Enable the MPU.
    480            * @param  MPU_Control: Specifies the control mode of the MPU during hard fault,
    481            *          NMI, FAULTMASK and privileged access to the default memory
    482            *          This parameter can be one of the following values:
    483            *            @arg MPU_HFNMI_PRIVDEF_NONE
    484            *            @arg MPU_HARDFAULT_NMI
    485            *            @arg MPU_PRIVILEGED_DEFAULT
    486            *            @arg MPU_HFNMI_PRIVDEF
    487            * @retval None
    488            */

   \                                 In section .text, align 2, keep-with-next
    489          void HAL_MPU_Enable(uint32_t MPU_Control)
    490          {
    491            __DMB(); /* Data Memory Barrier operation to force any outstanding writes to memory before enabling the MPU */
   \                     HAL_MPU_Enable: (+1)
   \        0x0   0xF3BF 0x8F5F      DMB      SY
    492          
    493            /* Enable the MPU */
    494            MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
   \        0x4   0xF050 0x0001      ORRS     R0,R0,#0x1
   \        0x8   0x....             LDR.N    R1,??DataTable16_14
   \        0xA   0x6008             STR      R0,[R1, #+0]
    495          
    496            /* Enable fault exceptions */
    497            SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
   \        0xC   0x....             LDR.N    R0,??DataTable16_15
   \        0xE   0x6801             LDR      R1,[R0, #+0]
   \       0x10   0xF451 0x3180      ORRS     R1,R1,#0x10000
   \       0x14   0x6001             STR      R1,[R0, #+0]
    498          
    499            /* Follow ARM recommendation with */
    500            /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
    501            __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
   \       0x16   0xF3BF 0x8F4F      DSB      SY
    502            __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
   \       0x1A   0xF3BF 0x8F6F      ISB      SY
    503          }
   \       0x1E   0x4770             BX       LR
    504          
    505          #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    506          /**
    507            * @brief  Enable the non-secure MPU.
    508            * @param  MPU_Control: Specifies the control mode of the MPU during hard fault,
    509            *          NMI, FAULTMASK and privileged access to the default memory
    510            *          This parameter can be one of the following values:
    511            *            @arg MPU_HFNMI_PRIVDEF_NONE
    512            *            @arg MPU_HARDFAULT_NMI
    513            *            @arg MPU_PRIVILEGED_DEFAULT
    514            *            @arg MPU_HFNMI_PRIVDEF
    515            * @retval None
    516            */
    517          void HAL_MPU_Enable_NS(uint32_t MPU_Control)
    518          {
    519            __DMB(); /* Data Memory Barrier operation to force any outstanding writes to memory before enabling the MPU */
    520          
    521            /* Enable the MPU */
    522            MPU_NS->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
    523          
    524            /* Enable fault exceptions */
    525            SCB_NS->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
    526          
    527            /* Follow ARM recommendation with */
    528            /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
    529            __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
    530            __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
    531          }
    532          #endif /* __ARM_FEATURE_CMSE */
    533          
    534          /**
    535            * @brief  Disable the MPU.
    536            * @retval None
    537            */

   \                                 In section .text, align 2, keep-with-next
    538          void HAL_MPU_Disable(void)
    539          {
    540            __DMB(); /* Force any outstanding transfers to complete before disabling MPU */
   \                     HAL_MPU_Disable: (+1)
   \        0x0   0xF3BF 0x8F5F      DMB      SY
    541          
    542            /* Disable fault exceptions */
    543            SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
   \        0x4   0x....             LDR.N    R0,??DataTable16_15
   \        0x6   0x6801             LDR      R1,[R0, #+0]
   \        0x8   0xF431 0x3180      BICS     R1,R1,#0x10000
   \        0xC   0x6001             STR      R1,[R0, #+0]
    544          
    545            /* Disable the MPU */
    546            MPU->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
   \        0xE   0x....             LDR.N    R0,??DataTable16_14
   \       0x10   0x6801             LDR      R1,[R0, #+0]
   \       0x12   0x0849             LSRS     R1,R1,#+1
   \       0x14   0x0049             LSLS     R1,R1,#+1
   \       0x16   0x6001             STR      R1,[R0, #+0]
    547          
    548            /* Follow ARM recommendation with */
    549            /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
    550            __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
   \       0x18   0xF3BF 0x8F4F      DSB      SY
    551            __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
   \       0x1C   0xF3BF 0x8F6F      ISB      SY
    552          }
   \       0x20   0x4770             BX       LR
    553          
    554          #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    555          /**
    556            * @brief  Disable the non-secure MPU.
    557            * @retval None
    558            */
    559          void HAL_MPU_Disable_NS(void)
    560          {
    561            __DMB(); /* Force any outstanding transfers to complete before disabling MPU */
    562          
    563            /* Disable fault exceptions */
    564            SCB_NS->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
    565          
    566            /* Disable the MPU */
    567            MPU_NS->CTRL  &= ~MPU_CTRL_ENABLE_Msk;
    568          
    569            /* Follow ARM recommendation with */
    570            /* Data Synchronization and Instruction Synchronization Barriers to ensure MPU configuration */
    571            __DSB(); /* Ensure that the subsequent instruction is executed only after the write to memory */
    572            __ISB(); /* Flush and refill pipeline with updated MPU configuration settings */
    573          }
    574          #endif /* __ARM_FEATURE_CMSE */
    575          
    576          /**
    577            * @brief  Initialize and configure the Region and the memory to be protected.
    578            * @param  pMPU_RegionInit: Pointer to a MPU_Region_InitTypeDef structure that contains
    579            *                the initialization and configuration information.
    580            * @retval None
    581            */

   \                                 In section .text, align 2, keep-with-next
    582          void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *const pMPU_RegionInit)
    583          {
   \                     HAL_MPU_ConfigRegion: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x0001             MOVS     R1,R0
    584            MPU_ConfigRegion(MPU, pMPU_RegionInit);
   \        0x4   0x....             LDR.N    R0,??DataTable16_16
   \        0x6   0x.... 0x....      BL       MPU_ConfigRegion
    585          }
   \        0xA   0xBD01             POP      {R0,PC}
    586          
    587          #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    588          /**
    589            * @brief  Initialize and configure the Region and the memory to be protected for non-secure MPU.
    590            * @param  pMPU_RegionInit: Pointer to a MPU_Region_InitTypeDef structure that contains
    591            *                the initialization and configuration information.
    592            * @retval None
    593            */
    594          void HAL_MPU_ConfigRegion_NS(const MPU_Region_InitTypeDef *const pMPU_RegionInit)
    595          {
    596            MPU_ConfigRegion(MPU_NS, pMPU_RegionInit);
    597          }
    598          #endif /* __ARM_FEATURE_CMSE */
    599          
    600          /**
    601            * @brief  Initialize and configure the memory attributes.
    602            * @param  pMPU_AttributesInit: Pointer to a MPU_Attributes_InitTypeDef structure that contains
    603            *                the initialization and configuration information.
    604            * @retval None
    605            */

   \                                 In section .text, align 2, keep-with-next
    606          void HAL_MPU_ConfigMemoryAttributes(const MPU_Attributes_InitTypeDef *const pMPU_AttributesInit)
    607          {
   \                     HAL_MPU_ConfigMemoryAttributes: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x0001             MOVS     R1,R0
    608            MPU_ConfigMemoryAttributes(MPU, pMPU_AttributesInit);
   \        0x4   0x....             LDR.N    R0,??DataTable16_16
   \        0x6   0x.... 0x....      BL       MPU_ConfigMemoryAttributes
    609          }
   \        0xA   0xBD01             POP      {R0,PC}
    610          
    611          #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    612          /**
    613            * @brief  Initialize and configure the memory attributes for non-secure MPU.
    614            * @param  pMPU_AttributesInit: Pointer to a MPU_Attributes_InitTypeDef structure that contains
    615            *                the initialization and configuration information.
    616            * @retval None
    617            */
    618          void HAL_MPU_ConfigMemoryAttributes_NS(const MPU_Attributes_InitTypeDef *const pMPU_AttributesInit)
    619          {
    620            MPU_ConfigMemoryAttributes(MPU_NS, pMPU_AttributesInit);
    621          }
    622          #endif /* __ARM_FEATURE_CMSE */
    623          
    624          /**
    625            * @}
    626            */
    627          
    628          /**
    629            * @}
    630            */
    631          
    632          /** @addtogroup CORTEX_Private_Functions
    633            * @{
    634            */
    635          /**
    636            * @brief  Initialize and configure the Region and the memory to be protected for MPU.
    637            * @param  MPUx: Pointer to MPU_Type structure
    638            *          This parameter can be one of the following values:
    639            *            @arg MPU
    640            *            @arg MPU_NS
    641            * @param  pMPU_RegionInit: Pointer to a MPU_Region_InitTypeDef structure that contains
    642            *                the initialization and configuration information.
    643            * @retval None
    644            */

   \                                 In section .text, align 2, keep-with-next
    645          static void MPU_ConfigRegion(MPU_Type *MPUx, const MPU_Region_InitTypeDef *const pMPU_RegionInit)
    646          {
    647            /* Check the parameters */
    648          #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    649            assert_param(IS_MPU_INSTANCE(MPUx));
    650          #endif /* __ARM_FEATURE_CMSE */
    651            assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
    652            assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));
    653          
    654            /* Follow ARM recommendation with Data Memory Barrier prior to MPU configuration */
    655            __DMB();
   \                     MPU_ConfigRegion: (+1)
   \        0x0   0xF3BF 0x8F5F      DMB      SY
    656          
    657            /* Set the Region number */
    658            MPUx->RNR = pMPU_RegionInit->Number;
   \        0x4   0x784A             LDRB     R2,[R1, #+1]
   \        0x6   0x6082             STR      R2,[R0, #+8]
    659          
    660            if (pMPU_RegionInit->Enable != MPU_REGION_DISABLE)
   \        0x8   0x780A             LDRB     R2,[R1, #+0]
   \        0xA   0x2A00             CMP      R2,#+0
   \        0xC   0xD015             BEQ.N    ??MPU_ConfigRegion_0
    661            {
    662              /* Check the parameters */
    663              assert_param(IS_MPU_INSTRUCTION_ACCESS(pMPU_RegionInit->DisableExec));
    664              assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(pMPU_RegionInit->AccessPermission));
    665              assert_param(IS_MPU_ACCESS_SHAREABLE(pMPU_RegionInit->IsShareable));
    666          
    667              MPUx->RBAR = (((uint32_t)pMPU_RegionInit->BaseAddress               & 0xFFFFFFE0UL)  |
    668                            ((uint32_t)pMPU_RegionInit->IsShareable           << MPU_RBAR_SH_Pos)  |
    669                            ((uint32_t)pMPU_RegionInit->AccessPermission      << MPU_RBAR_AP_Pos)  |
    670                            ((uint32_t)pMPU_RegionInit->DisableExec           << MPU_RBAR_XN_Pos));
   \        0xE   0x684B             LDR      R3,[R1, #+4]
   \       0x10   0x095B             LSRS     R3,R3,#+5
   \       0x12   0x015B             LSLS     R3,R3,#+5
   \       0x14   0x7BCA             LDRB     R2,[R1, #+15]
   \       0x16   0xEA53 0x03C2      ORRS     R3,R3,R2, LSL #+3
   \       0x1A   0x7B4A             LDRB     R2,[R1, #+13]
   \       0x1C   0xEA53 0x0342      ORRS     R3,R3,R2, LSL #+1
   \       0x20   0x7B8A             LDRB     R2,[R1, #+14]
   \       0x22   0x4313             ORRS     R3,R2,R3
   \       0x24   0x60C3             STR      R3,[R0, #+12]
    671          
    672              MPUx->RLAR = (((uint32_t)pMPU_RegionInit->LimitAddress                    & 0xFFFFFFE0UL) |
    673                            ((uint32_t)pMPU_RegionInit->AttributesIndex       << MPU_RLAR_AttrIndx_Pos) |
    674                            ((uint32_t)pMPU_RegionInit->Enable                << MPU_RLAR_EN_Pos));
   \       0x26   0x688A             LDR      R2,[R1, #+8]
   \       0x28   0x0952             LSRS     R2,R2,#+5
   \       0x2A   0x0152             LSLS     R2,R2,#+5
   \       0x2C   0x7B0B             LDRB     R3,[R1, #+12]
   \       0x2E   0xEA52 0x0243      ORRS     R2,R2,R3, LSL #+1
   \       0x32   0x7809             LDRB     R1,[R1, #+0]
   \       0x34   0x430A             ORRS     R2,R1,R2
   \       0x36   0x6102             STR      R2,[R0, #+16]
   \       0x38   0xE003             B.N      ??MPU_ConfigRegion_1
    675            }
    676            else
    677            {
    678              MPUx->RLAR = 0U;
   \                     ??MPU_ConfigRegion_0: (+1)
   \       0x3A   0x2100             MOVS     R1,#+0
   \       0x3C   0x6101             STR      R1,[R0, #+16]
    679              MPUx->RBAR = 0U;
   \       0x3E   0x2100             MOVS     R1,#+0
   \       0x40   0x60C1             STR      R1,[R0, #+12]
    680            }
    681          }
   \                     ??MPU_ConfigRegion_1: (+1)
   \       0x42   0x4770             BX       LR
    682          
    683          /**
    684            * @brief  Initialize and configure the memory attributes for MPU.
    685            * @param  MPUx: Pointer to MPU_Type structure
    686            *          This parameter can be one of the following values:
    687            *            @arg MPU
    688            *            @arg MPU_NS
    689            * @param  pMPU_AttributesInit: Pointer to a MPU_Attributes_InitTypeDef structure that contains
    690            *                the initialization and configuration information.
    691            * @retval None
    692            */

   \                                 In section .text, align 2, keep-with-next
    693          static void MPU_ConfigMemoryAttributes(MPU_Type *MPUx, const MPU_Attributes_InitTypeDef *const pMPU_AttributesInit)
    694          {
   \                     MPU_ConfigMemoryAttributes: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
    695            __IO uint32_t *p_mair;
    696            uint32_t      attr_values;
    697            uint32_t      attr_number;
    698          
    699            /* Check the parameters */
    700          #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    701            assert_param(IS_MPU_INSTANCE(MPUx));
    702          #endif /* __ARM_FEATURE_CMSE */
    703            assert_param(IS_MPU_ATTRIBUTES_NUMBER(pMPU_AttributesInit->Number));
    704            /* No need to check Attributes value as all 0x0..0xFF possible */
    705          
    706            /* Follow ARM recommendation with Data Memory Barrier prior to MPUx configuration */
    707            __DMB();
   \        0x2   0xF3BF 0x8F5F      DMB      SY
    708          
    709            if (pMPU_AttributesInit->Number < MPU_ATTRIBUTES_NUMBER4)
   \        0x6   0x780A             LDRB     R2,[R1, #+0]
   \        0x8   0x2A04             CMP      R2,#+4
   \        0xA   0xD203             BCS.N    ??MPU_ConfigMemoryAttributes_0
    710            {
    711              /* Program MPU_MAIR0 */
    712              p_mair = &(MPUx->MAIR0);
   \        0xC   0xF110 0x0230      ADDS     R2,R0,#+48
    713              attr_number = pMPU_AttributesInit->Number;
   \       0x10   0x780C             LDRB     R4,[R1, #+0]
   \       0x12   0xE003             B.N      ??MPU_ConfigMemoryAttributes_1
    714            }
    715            else
    716            {
    717              /* Program MPU_MAIR1 */
    718              p_mair = &(MPUx->MAIR1);
   \                     ??MPU_ConfigMemoryAttributes_0: (+1)
   \       0x14   0xF110 0x0234      ADDS     R2,R0,#+52
    719              attr_number = (uint32_t)pMPU_AttributesInit->Number - 4U;
   \       0x18   0x780C             LDRB     R4,[R1, #+0]
   \       0x1A   0x1F24             SUBS     R4,R4,#+4
    720            }
    721          
    722            attr_values = *(p_mair);
   \                     ??MPU_ConfigMemoryAttributes_1: (+1)
   \       0x1C   0x6813             LDR      R3,[R2, #+0]
    723            attr_values &=  ~(0xFFUL << (attr_number * 8U));
   \       0x1E   0x25FF             MOVS     R5,#+255
   \       0x20   0x00E0             LSLS     R0,R4,#+3
   \       0x22   0x4085             LSLS     R5,R5,R0
   \       0x24   0x43AB             BICS     R3,R3,R5
    724            *(p_mair) = attr_values | ((uint32_t)pMPU_AttributesInit->Attributes << (attr_number * 8U));
   \       0x26   0x7849             LDRB     R1,[R1, #+1]
   \       0x28   0x00E0             LSLS     R0,R4,#+3
   \       0x2A   0x4081             LSLS     R1,R1,R0
   \       0x2C   0x430B             ORRS     R3,R1,R3
   \       0x2E   0x6013             STR      R3,[R2, #+0]
    725          }
   \       0x30   0xBC30             POP      {R4,R5}
   \       0x32   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \        0x0   0xE000'ED0C        DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \        0x0   0x05FA'0000        DC32     0x5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \        0x0   0xE000'E180        DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \        0x0   0xE000'E200        DC32     0xe000e200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \        0x0   0xE000'E280        DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \        0x0   0xE000'E300        DC32     0xe000e300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \        0x0   0xE000'E400        DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \        0x0   0xE000'ED18        DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \        0x0   0x05FA'0004        DC32     0x5fa0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \        0x0   0xE000'E014        DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \        0x0   0xE000'E018        DC32     0xe000e018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \        0x0   0xE000'E010        DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \        0x0   0x4402'0CE4        DC32     0x44020ce4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \        0x0   0xE000'ED94        DC32     0xe000ed94

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \        0x0   0xE000'ED24        DC32     0xe000ed24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \        0x0   0xE000'ED90        DC32     0xe000ed90
    726          /**
    727            * @}
    728            */
    729          
    730          #endif /* HAL_CORTEX_MODULE_ENABLED */
    731          /**
    732            * @}
    733            */
    734          
    735          /**
    736            * @}
    737            */
    738          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HAL_MPU_ConfigMemoryAttributes
         8   -> MPU_ConfigMemoryAttributes
       8   HAL_MPU_ConfigRegion
         8   -> MPU_ConfigRegion
       0   HAL_MPU_Disable
       0   HAL_MPU_Enable
       8   HAL_NVIC_ClearPendingIRQ
         8   -> __NVIC_ClearPendingIRQ
       8   HAL_NVIC_DisableIRQ
         8   -> __NVIC_DisableIRQ
       8   HAL_NVIC_EnableIRQ
         8   -> __NVIC_EnableIRQ
       8   HAL_NVIC_GetActive
         8   -> __NVIC_GetActive
       8   HAL_NVIC_GetPendingIRQ
         8   -> __NVIC_GetPendingIRQ
      16   HAL_NVIC_GetPriority
        16   -> NVIC_DecodePriority
        16   -> __NVIC_GetPriority
       8   HAL_NVIC_GetPriorityGrouping
         8   -> __NVIC_GetPriorityGrouping
       8   HAL_NVIC_SetPendingIRQ
         8   -> __NVIC_SetPendingIRQ
      16   HAL_NVIC_SetPriority
        16   -> NVIC_EncodePriority
        16   -> __NVIC_GetPriorityGrouping
        16   -> __NVIC_SetPriority
       8   HAL_NVIC_SetPriorityGrouping
         8   -> __NVIC_SetPriorityGrouping
       8   HAL_NVIC_SystemReset
         8   -> __NVIC_SystemReset
       0   HAL_SYSTICK_CLKSourceConfig
       0   HAL_SYSTICK_Callback
       8   HAL_SYSTICK_Config
         8   -> SysTick_Config
       8   HAL_SYSTICK_IRQHandler
         8   -> HAL_SYSTICK_Callback
       8   MPU_ConfigMemoryAttributes
       0   MPU_ConfigRegion
      12   NVIC_DecodePriority
       4   NVIC_EncodePriority
       8   SysTick_Config
         8   -> __NVIC_SetPriority
       0   __NVIC_ClearPendingIRQ
       0   __NVIC_DisableIRQ
       0   __NVIC_EnableIRQ
       0   __NVIC_GetActive
       0   __NVIC_GetPendingIRQ
       0   __NVIC_GetPriority
       0   __NVIC_GetPriorityGrouping
       0   __NVIC_SetPendingIRQ
       0   __NVIC_SetPriority
       0   __NVIC_SetPriorityGrouping
       0   __NVIC_SystemReset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_10
       4  ??DataTable16_11
       4  ??DataTable16_12
       4  ??DataTable16_13
       4  ??DataTable16_14
       4  ??DataTable16_15
       4  ??DataTable16_16
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
      12  HAL_MPU_ConfigMemoryAttributes
      12  HAL_MPU_ConfigRegion
      34  HAL_MPU_Disable
      32  HAL_MPU_Enable
      10  HAL_NVIC_ClearPendingIRQ
      10  HAL_NVIC_DisableIRQ
      10  HAL_NVIC_EnableIRQ
      10  HAL_NVIC_GetActive
      10  HAL_NVIC_GetPendingIRQ
      26  HAL_NVIC_GetPriority
       8  HAL_NVIC_GetPriorityGrouping
      10  HAL_NVIC_SetPendingIRQ
      32  HAL_NVIC_SetPriority
       8  HAL_NVIC_SetPriorityGrouping
       8  HAL_NVIC_SystemReset
     100  HAL_SYSTICK_CLKSourceConfig
       2  HAL_SYSTICK_Callback
       8  HAL_SYSTICK_Config
       8  HAL_SYSTICK_IRQHandler
      52  MPU_ConfigMemoryAttributes
      68  MPU_ConfigRegion
      64  NVIC_DecodePriority
      60  NVIC_EncodePriority
      46  SysTick_Config
      28  __NVIC_ClearPendingIRQ
      36  __NVIC_DisableIRQ
      28  __NVIC_EnableIRQ
      38  __NVIC_GetActive
      38  __NVIC_GetPendingIRQ
      36  __NVIC_GetPriority
      12  __NVIC_GetPriorityGrouping
      28  __NVIC_SetPendingIRQ
      36  __NVIC_SetPriority
      30  __NVIC_SetPriorityGrouping
      26  __NVIC_SystemReset

 
 1'044 bytes in section .text
 
 1'042 bytes of CODE memory (+ 2 bytes shared)

Errors: none
Warnings: none
